package game;

public class PieceChecker {
	
	public static boolean checkConnect4(Piece p) {
		//get neighbours to piece,
		//run recursive checks for each direction and sum
		if(p == null)
			throw new IllegalArgumentException("piece cannot be null");
		int[] coords = p.getCoords();
		Board b = p.getBoard();
		if(b == null)
			throw new IllegalArgumentException("Piece's board cannot be null");
		Piece[][] board = p.getBoard().getBoard();
		//only have to check first coord since can only set both at the same time
		int row = coords[0];
		int col = coords[1];
		if(row == -1)
			throw new IllegalArgumentException("Piece's coordinates must initalized");
		
		//now that we have coordinates and board, go through all the neighbours and recurse in directions summing them
		//note that the board MUST be at least 4x4
		
		//check horizontal line first
		int horizontalSum = 0;
		if(row - 1 >= 0)
			horizontalSum += PieceChecker.checkConnect4L(p, board[row-1][col]);
		if(row + 1 < b.getWidth())
			horizontalSum += PieceChecker.checkConnect4R(p, board[row+1][col]);
		
		if(col)
		return false;
	}
	
	private static int checkConnect4L(Piece prev, Piece curr) {
		if(curr == null)
			return 0;
		if(prev.getPlayer().getColour() != curr.getPlayer().getColour())
			return 0;
		
		int[] coords = curr.getCoords();
		int row = coords[0];
		int col = coords[1];
		if(row-1 < 0)
			return 0;
		Piece next = curr.getBoard().getBoard()[row-1][col];
		return 1 + PieceChecker.checkConnect4L(curr, next);
	}
	
	private static int checkConnect4R(Piece prev, Piece curr) {
		if(curr == null)
			return 0;
		if(prev.getPlayer().getColour() != curr.getPlayer().getColour())
			return 0;
		
		int[] coords = curr.getCoords();
		int row = coords[0];
		int col = coords[1];
		if(row+1 >= curr.getBoard().getWidth())
			return 0;
		Piece next = curr.getBoard().getBoard()[row+1][col];
		return 1 + PieceChecker.checkConnect4R(curr, next);
	}

}
